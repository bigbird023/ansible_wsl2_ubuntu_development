---
# File: setup.yml

- hosts: localhost
  connection: local
  pre_tasks:
    - name: Fail if Ansible version is too old 
      fail: 
        msg: "Workstation requires a minimum Ansible version of {{ ansible_minimum_version }}. Please update Ansible and run workstation.sh again."
      when: ansible_version.full is version(ansible_minimum_version, operator='lt', strict=True)
    - name: abort execution on 32-bit environments
      fail:
        msg: "These playbooks are now only available on 64-bit OSes"
      when: ansible_architecture == "i386"
  remote_user: ansible
  become: yes
  vars_files:
    - variables.yml
  roles: # order does matter
    - role: "compressiontools"
    - role: "scm"
    # - role: "gantsign.sdkman"
    #   sdkman_users:
    #     - "bigbird023"
    - role: "comcast.sdkman"
      sdkman_user: bigbird023
      sdkman_group: bigbird023
      sdkman_auto_answer: true
      sdkman_update: true
      # sdkman_uninstall_packages:
      #   - { candidate: groovy, version: 1.8.9 }
      sdkman_install_packages:
        - { candidate: java, version: 8.0.402-zulu }
        - { candidate: java, version: 11.0.22-zulu }
        - { candidate: maven, version: 3.6.3 }
      #   # Use this syntax if you want SDKMAN to be aware of packages installed *without* SDKMAN, e.g. Oracle JDKs
      #   - { candidate: java, version: 1.8.0-oracle, localpath: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk }
      sdkman_defaults:
        maven: 3.6.3
        java: 11.0.22-zulu
      sdkman_flush_caches_before:
        - temp
      sdkman_flush_caches_after:
        - archives
        - broadcast
        - candidates
        - temp
      sdkman_offline_mode: false
      # sdkman_update_alternatives:
      #   - candidate: java
      #     name: java
      #     link: /usr/bin/java
      #   - candidate: java
      #     name: javac
      #     link: /usr/bin/javac
    - role: ansible-role-golang
    #- role: go-tools

